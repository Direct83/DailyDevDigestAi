"""Модуль генерации статьи."""
from __future__ import annotations

from textwrap import dedent
from typing import List

from .config import openai_config


def _build_prompt(topic: str, thesis: List[str]) -> str:
    bullet_points = "\n".join(f"- {t}" for t in thesis)
    return dedent(
        f"""
        Ты — редактор Эльбрус Буткемпа. Напиши структурированную статью по теме: "{topic}".
        Требования:
        - Вступление с интригующим заходом (2-4 предложения)
        - Структура с подзаголовками h2/h3
        - Примеры кода, если уместно
        - Нейтральный тон, дружелюбная подача, минимум фломастера
        - Длина 4000–8000 символов
        - Вставки CTA добавит другой модуль — не добавляй сам
        Тезисы для ориентира:
        {bullet_points}
        Оформи заголовок h1 в первой строке.
        """
    ).strip()


def generate_article(topic: str, thesis: List[str]) -> str:
    """Генерирует текст статьи.

    Пока умолчание: локальная генерация-заглушка, но если есть OPENAI_API_KEY — можно подключить реальный вызов.
    """
    if openai_config.api_key:
        # Лёгкая заглушка: не делаем реальный вызов, но формируем структуру.
        # Интеграцию с OpenAI можно активировать позже.
        prompt = _build_prompt(topic, thesis)
        return f"# {topic}\n\n{prompt}\n\n(Подключите OpenAI для реальной генерации)"

    # Фолбэк-контент
    intro = (
        "Сегодня разберёмся в теме и покажем практические шаги. Материал подойдёт как начинающим, так и практикам."
    )
    sections = [
        ("Зачем это нужно", "Кратко объясняем ценность и пользу."),
        ("Как это работает", "Описываем архитектуру/алгоритм по шагам."),
        ("Пример кода", "```python\nprint('hello world')\n```"),
        ("Типичные ошибки", "Что часто идёт не так и как это исправить."),
        ("Итоги", "Короткая выжимка и ссылки на дальнейшие шаги."),
    ]
    body = "\n\n".join([f"## {h}\n\n{t}" for h, t in sections])
    return f"# {topic}\n\n{intro}\n\n{body}"
